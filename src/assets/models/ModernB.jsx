/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/assets/models/modernB.glb -T 
Files: public/assets/models/modernB.glb [18.75MB] > /home/mem0real/Desktop/coding/react-three-fiber-projects/r3f-animation-projects/r3f-framer/modernB-transformed.glb [434.78KB] (98%)
Author: saeedakbari (https://sketchfab.com/saakbary64)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/residential-complex-modern-apartment-building-d1e54b379c664a349cd4a288527317c8
Title: residential complex modern apartment building
*/

import React, { useEffect, useRef, useState } from "react";
import { OrbitControls, useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import * as THREE from "three";
import { useZus } from "../../utils/store";

// Add these constants at the top to control the behavior
const STOP_DISTANCE = 1; // Units to stop before the surface
const ZOOM_DURATION = 1.5; // Seconds for zoom animation
const ZOOM_SPEED_MULTIPLIER = 0.6; // Slower animation speed

export function ModernB(props) {
	const { nodes, materials } = useGLTF(
		"/assets/models/modernB-transformed.glb"
	);

	const [hovered, setHovered] = useState(false);
	const [animation, setAnimation] = useState({
		active: false,
		progress: 0,
		duration: 1,
		cameraStart: new THREE.Vector3(),
		cameraEnd: new THREE.Vector3(),
		controlsTargetStart: new THREE.Vector3(),
		controlsTargetEnd: new THREE.Vector3(),
	});
	const [target, setTarget] = useState(null);
	const [progress, setProgress] = useState(0);
	const [second, setSecond] = useState(false);

	const { camera, gl } = useThree();

	const groupRef = useRef();
	const controlsRef = useRef();

	const { setModel, setOverlayOpacity } = useZus();

	// Animation logic
	useFrame((_, delta) => {
		if (!target || progress >= 1) return;

		// Slower progress calculation
		const newProgress = Math.min(progress + delta * ZOOM_SPEED_MULTIPLIER, 1);
		const easedProgress = THREE.MathUtils.smoothstep(newProgress, 0, 1);

		// Animate camera position
		camera.position.lerpVectors(target.camStart, target.camEnd, easedProgress);

		// Animate controls target
		controlsRef.current.target.lerpVectors(
			target.controlsStart,
			target.point,
			easedProgress
		);

		// Animate overlay (start fading after 50% progress)
		setOverlayOpacity(Math.max(0, (newProgress - 0.5) * 2));

		setProgress(newProgress);

		// if (newProgress == 1) {
		// 	camera.position.set(10, 10, 10);
		// 	camera.fov.set(75);
		// 	setSecond(true);
		// }
		if (newProgress >= 1) {
			// Animation complete - add your model swap logic here
			setModel((prev) => (prev === "A" ? "B" : "A"));
			setOverlayOpacity(0);
		}
	});

	// Modified handleClick function
	const handleClick = (e) => {
		e.stopPropagation();
		const { point } = e;

		// Calculate camera path with stop distance
		const camStart = camera.position.clone();
		const direction = new THREE.Vector3()
			.subVectors(point, camStart)
			.normalize();

		// Calculate end position stopping before the surface
		const camEnd = point.clone().sub(direction.multiplyScalar(STOP_DISTANCE));

		setTarget({
			point,
			camStart,
			camEnd,
			controlsStart: controlsRef.current.target.clone(),
		});
		setProgress(0);
	};
	return (
		<>
			<OrbitControls
				autoRotate={!hovered}
				enablePan={false}
				enableRotate={false}
				enableDamping={false}
				target={!second ? [0, 2, 0] : [0, 0, 0]}
				ref={controlsRef}
				enabled={!animation.active} // Disable during animation
			/>
			<group
				{...props}
				dispose={null}
				ref={groupRef}
				onPointerEnter={() => setHovered(true)}
				onPointerLeave={() => setHovered(false)}
				onClick={handleClick}
				style={{ cursor: "pointer" }}
			>
				<mesh
					geometry={nodes.Object_2.geometry}
					material={materials.PaletteMaterial001}
					rotation={[-Math.PI / 2, 0, 0]}
					scale={0.551}
				/>
				<mesh
					geometry={nodes.Object_13.geometry}
					material={materials.PaletteMaterial002}
					rotation={[-Math.PI / 2, 0, 0]}
					scale={0.551}
				/>
			</group>
		</>
	);
}

useGLTF.preload("/assets/models/modernB-transformed.glb");
